[user]
  name = Daymel Bonne
  email = 7658145+dbonne@users.noreply.github.com
  signingkey = 4B5EA75C97B73F9D

[alias]
  alias = !git config -l | grep ^alias | cut -c 7- | sort

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  branches = branch -a

  br = branch

  # Clone a repository including all submodules
  c = clone --recursive

  # Commit all changes
  ca = !git add -A && git commit -av

  ci = commit

  co = checkout

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"

  done = !git push origin HEAD

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Color graph log view
  graph = log --graph --color --pretty=format:"%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%x20(%ce)%n%x20%s%n"

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  ll = log --color --decorate --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an (%G?)>%Creset' --abbrev-commit

  mdiff = !f() { git stash | head -1 | grep -q 'No local changes to save'; x=$?; git merge --no-commit $1 &>/dev/null; git add -u &>/dev/null; git diff --staged; git reset --hard &>/dev/null; test $x -ne 0 && git stash pop &>/dev/null; }; f

  # from myles borins https://github.com/TheAlphaNerd/Dot-files/blob/master/.gitconfig
  # github broke some workflow... this will make it less painful
  patchit = "!f() { echo $1.patch | sed s_pull/[0-9]*/commits_commit_ | xargs curl -L | git am --whitespace=fix; }; f"

  patchit-please=!f() { echo $1.patch | sed s_pull/[0-9]*/commits_commit_ | xargs curl -L | git am -3 --whitespace=fix; }; f

  # Checkout a pull request from origin (of a github repository)
  pr = !"pr() { git fetch origin pull/$1/head:pr-$1; git checkout pr-$1; }; pr"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  remotes = remote -v

  res = !git reset --hard

  # View the current working tree status using the short format
  s = status -s

  save = !git add -A && git commit -m 'chore: savepoint'

  st = status

  # Show verbose output about tags, branches or remotes
  tags = tag -l

  # from seth vargo https://gist.github.com/sethvargo/6b2f7b592853381690bfe3bd00947e8f
  undo = !git reset HEAD~1 --mixed

  undo = reset HEAD~1 --mixed

  unreleased = !f() { git fetch --tags && git diff $(git tag | tail -n 1); }; f

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false
  #editor = nvim
  autocrlf = input

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[diff]
  # Detect copies as well as renames
  renames = copies

[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 1

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true

[push]
  # change to maching for machines with older versions of git 1.x.x
  default = simple

[commit]
	gpgsign = true

[pull]
  rebase = true

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
